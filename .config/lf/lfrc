# -*- mode: conf -*-

# Basic vars
set shell sh
set previewer ~/.config/lf/scope
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons		# Enable icons. Requires nerd fonts and LF_ICONS variable.


# Custom Functions


cmd xcopy ${{
	xclip -selection clipboard -t $(file --mime-type -b "$f") -i "$f"
}}
map Y xcopy

cmd drag ${{
	dragon -x "$f"
}}


# cmds/functions
# cmd open ${{
# 	case $(file --mime-type "$f" -b) in
# 	text/troff) man ./ "$f";;
# 	text/html) setsid $BROWSER "$f";;
# 	text/*) emacsclient $fx;;
# 	image/x-xcf|image/svg+xml) setsid gimp "$f" >/dev/null 2>&1 & ;;
# 	image/*) rotdir "$f" | setsid sxiv -aio 2>/dev/null | lf-select & ;;
# 	audio/*) mpv "$f" ;;
# 	video/*) setsid mpv "$f" -quiet >/dev/null 2>&1 & ;;
# 	application/pdf) setsid $VIEWER $fx >/dev/null 2>&1 & ;;
# 		*) for f in $fx; do setsid $OPENER "$f" >/dev/null 2>&1 & done;;
# 	esac
# }}

cmd rename %[ -e $1 ] && printf "file exists" || mv "$f" $1

# TODO rewrite with modeline
cmd delete ${{
	set -f
	printf "delete? [y/n] "
	read ans
	[ $ans = "y" ] && rm -rf $fx
}}

map D delete

# TODO rewrite with modeline
cmd mkdir ${{
	set -f
	printf "mkdir: "
	read ans
	[ -n "$ans" ] && mkdir -p "$ans"
}}

# TODO rewrite with modeline
cmd moveto ${{
	set -f
	clear; echo "Move to where?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/directories | fzf)" &&
	eval mv -iv $fx $dest &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

map M moveto

# FIXME rewrite with modeline
cmd copyto ${{
	set -f
	clear; echo "Copy to where?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/directories | fzf)" &&
	eval cp -ivr $fx $dest &&
	notify-send "ðŸ“‹ copied" "File(s) copies to $dest."
}}

map C copyto

cmd open ${{
	# from https://github.com/gokcehan/lf/wiki/Integrations#archivemount
	case "$f" in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2|*.tar.gz|*.tgz|*.tar.xz|*.txz|*.zip|*.rar|*.iso)
            mntdir="$f-archivemount"
            [ ! -d "$mntdir" ] && {
                mkdir "$mntdir"
                archivemount "$f" "$mntdir"
                echo "$mntdir" >> "/tmp/__lf_archivemount_$id"
            }
            lf -remote "send $id cd \"$mntdir\""
            lf -remote "send $id reload"
            ;;
        *)
            for f in $fx; do
				case $(file --mime-type "$f" -bL) in
					text/*|application/json) $EDITOR "$f" > /dev/null 2> /dev/null & disown;;
					*) xdg-open "$f"  > /dev/null 2> /dev/null & disown;;
				esac
            done;;
    esac
}}

# FIXME copied from
# https://github.com/gokcehan/lf/wiki/Tips#create-symlinks-soft--hard
# and doesn't work
cmd link %{{
	mode="$(lf -remote 'load' | head -1)"
	if [ "$mode" = copy ]; then
		lf -remote 'load' | xargs -I % -r ln -sr % -t .
	# while a move mode is indicating a hard link
	elif [ "$mode" = move ]; then
		ln $files -t .
	fi
}}
cmd emacsclient ${{
	emacsclient "$f" > /dev/null 2>/dev/null & disown
}}
map P :link

# cmd bulkrename ${{
# 	vidir
# }}

# Bindings
map <c-f> $lf -remote "send $id select '$(fzf)'"
map J $lf -remote "send $id cd $(cut -d'	' -f2 ${XDG_CONFIG_HOME:-$HOME/.config}/directories | fzf)"
map g top
map a push %mkdir<space>
map + push %mkdir<space>
map r push :rename<space>
map R $lf -remote "send $id push :rename<space>$f"
# map b bulkrename
map <c-r> reload
map <enter> shell
map x $$f
map X !$f
map o open "$f"
map O $mimeopen --ask "$f"
# mouse scrolls
map <c-y> up
map <c-e> down
# C-z suspends lf
map <c-z> $ kill -STOP $PPID
map e emacsclient
# FIXME
# map = mkdir
